import type { ConnectionOptions, Deferred, Server, Transport } from "../nats-base-client/internal_mod";
export type WsSocketFactory = (u: string, opts: ConnectionOptions) => Promise<{
    socket: WebSocket;
    encrypted: boolean;
}>;
interface WsConnectionOptions extends ConnectionOptions {
    wsFactory?: WsSocketFactory;
}
export declare class WsTransport implements Transport {
    version: string;
    lang: string;
    closeError?: Error;
    connected: boolean;
    private done;
    private socket;
    private options;
    socketClosed: boolean;
    encrypted: boolean;
    peeked: boolean;
    yields: Uint8Array[];
    signal: Deferred<void>;
    closedNotification: Deferred<void | Error>;
    constructor();
    connect(server: Server, options: WsConnectionOptions): Promise<void>;
    disconnect(): void;
    private _closed;
    get isClosed(): boolean;
    [Symbol.asyncIterator](): AsyncIterableIterator<Uint8Array>;
    iterate(): AsyncIterableIterator<Uint8Array>;
    isEncrypted(): boolean;
    send(frame: Uint8Array): void;
    close(err?: Error | undefined): Promise<void>;
    closed(): Promise<void | Error>;
    isDiscarded(): boolean;
    discard(): void;
}
export {};
